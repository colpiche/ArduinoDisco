#include <FastLED.h>
#include <stdio.h>
#include <stdlib.h>

#define LED_PIN  3

#define COLOR_ORDER GRB
#define CHIPSET     WS2811

#define BRIGHTNESS 16

char* tiplouf[16][16][3] = {
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x50","0x78","0xac"},{"0x4c","0x7c","0xac"},{"0x50","0x7c","0xac"},{"0x4c","0x7c","0xa8"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xb0"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x04"},{"0x00","0x00","0x00"},{"0x4c","0x7c","0xac"},{"0x50","0x7c","0xa8"},{"0x50","0x7c","0xac"},{"0x50","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x50","0x78","0xac"},{"0x4c","0x7c","0xac"},{"0x4c","0x7c","0xac"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x4c","0x7c","0xac"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0x50","0x7c","0xac"},{"0x50","0x7c","0xa8"},{"0xfc","0xfc","0xe8"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0x4c","0x7c","0xac"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0xc0","0xc0","0xc0"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xfc"},{"0x0c","0x24","0x48"},{"0xfc","0xfc","0xe8"},{"0x9c","0xd0","0xe4"},{"0x98","0xd0","0xe4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xfc"},{"0x10","0x24","0x44"},{"0xfc","0xfc","0xe4"},{"0xc4","0xc0","0xc8"},{"0x00","0x00","0x00"},{"0x00","0x00","0x04"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0xc0","0xc0","0xc4"},{"0xfc","0xfc","0xe8"},{"0x10","0x24","0x40"},{"0x0c","0x24","0x3c"},{"0xfc","0xfc","0xe8"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe0"},{"0xfc","0xfc","0xe4"},{"0x10","0x24","0x40"},{"0x10","0x24","0x44"},{"0xfc","0xfc","0xe4"},{"0xbc","0xc4","0xc4"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0xc0","0xc0","0xc4"},{"0xfc","0xfc","0xe8"},{"0x44","0x8c","0xc0"},{"0x14","0x24","0x44"},{"0xfc","0xfc","0xe4"},{"0xfc","0xe0","0x58"},{"0xfc","0xe0","0x58"},{"0xfc","0xfc","0xe8"},{"0x10","0x24","0x40"},{"0x44","0x8c","0xc0"},{"0xfc","0xfc","0xe4"},{"0xc0","0xc0","0xc4"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0xc0","0xc0","0xc4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xd4","0xb0","0x34"},{"0xd8","0xac","0x38"},{"0xfc","0xfc","0xe8"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xbc","0xc4","0xc0"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0xc0","0xc0","0xc4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe8"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe0"},{"0xfc","0xfc","0xe4"},{"0xfc","0xfc","0xe8"},{"0xfc","0xfc","0xe4"},{"0xc0","0xc0","0xc4"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x98","0xd0","0xe4"},{"0x1c","0x3c","0x64"},{"0x1c","0x3c","0x64"},{"0x1c","0x3c","0x60"},{"0x1c","0x3c","0x60"},{"0x1c","0x3c","0x60"},{"0x1c","0x3c","0x64"},{"0x44","0x8c","0xc0"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe4"},{"0x98","0xd4","0xe0"},{"0x1c","0x3c","0x64"},{"0x1c","0x3c","0x60"},{"0x1c","0x3c","0x64"},{"0x20","0x3c","0x68"},{"0x44","0x8c","0xc0"},{"0x44","0x8c","0xc0"},{"0x44","0x8c","0xbc"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x98","0xd0","0xe4"},{"0x98","0xd0","0xe4"},{"0x98","0xd0","0xe4"},{"0x98","0xd0","0xe0"},{"0xfc","0xfc","0xe8"},{"0x9c","0xd0","0xe0"},{"0x98","0xd0","0xe0"},{"0xfc","0xfc","0xe4"},{"0x48","0x8c","0xc0"},{"0x44","0x8c","0xc0"},{"0x44","0x8c","0xc0"},{"0x44","0x8c","0xc4"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe4"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe0"},{"0x44","0x90","0xbc"},{"0x48","0x8c","0xc0"},{"0x20","0x3c","0x64"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x98","0xd4","0xe4"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe0"},{"0x98","0xd0","0xe4"},{"0x9c","0xd0","0xe0"},{"0x48","0x8c","0xc4"},{"0x48","0x8c","0xc0"},{"0x44","0x8c","0xc0"},{"0x1c","0x3c","0x64"},{"0x50","0x78","0xac"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}},
  {{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"},{"0xfc","0xe4","0x5c"},{"0xfc","0xe0","0x58"},{"0xd8","0xac","0x38"},{"0x44","0x8c","0xc0"},{"0x44","0x8c","0xc0"},{"0x44","0x8c","0xc0"},{"0xd4","0xb0","0x38"},{"0xfc","0xe0","0x58"},{"0xfc","0xe4","0x58"},{"0x1c","0x3c","0x60"},{"0x1c","0x3c","0x64"},{"0x00","0x00","0x00"},{"0x00","0x00","0x00"}}
};



// Params for width and height
const uint8_t kMatrixWidth = 16;
const uint8_t kMatrixHeight = 16;

// Param for different pixel layouts
const bool    kMatrixSerpentineLayout = true;
const bool    kMatrixVertical = false;


uint16_t XY( uint8_t x, uint8_t y)
{
  uint16_t i;
  
  if( kMatrixSerpentineLayout == false) {
    if (kMatrixVertical == false) {
      i = (y * kMatrixWidth) + x;
    } else {
      i = kMatrixHeight * (kMatrixWidth - (x+1))+y;
    }
  }

  if( kMatrixSerpentineLayout == true) {
    if (kMatrixVertical == false) {
      if( y & 0x01) {
        // Odd rows run backwards
        uint8_t reverseX = (kMatrixWidth - 1) - x;
        i = (y * kMatrixWidth) + reverseX;
      } else {
        // Even rows run forwards
        i = (y * kMatrixWidth) + x;
      }
    } else { // vertical positioning
      if ( x & 0x01) {
        i = kMatrixHeight * (kMatrixWidth - (x+1))+y;
      } else {
        i = kMatrixHeight * (kMatrixWidth - x) - (y+1);
      }
    }
  }
  
  return i;
}


#define NUM_LEDS (kMatrixWidth * kMatrixHeight)
CRGB leds_plus_safety_pixel[ NUM_LEDS + 1];
CRGB* const leds( leds_plus_safety_pixel + 1);

uint16_t XYsafe( uint8_t x, uint8_t y)
{
  if( x >= kMatrixWidth) return -1;
  if( y >= kMatrixHeight) return -1;
  return XY(x,y);
}


// Demo that USES "XY" follows code below

void loop()
{
    uint32_t ms = millis();
    int32_t yHueDelta32 = ((int32_t)cos16( ms * (27/1) ) * (350 / kMatrixWidth));
    int32_t xHueDelta32 = ((int32_t)cos16( ms * (39/1) ) * (310 / kMatrixHeight));
    DrawOneFrame();
    if( ms < 5000 ) {
      FastLED.setBrightness( scale8( BRIGHTNESS, (ms * 256) / 5000));
    } else {
      FastLED.setBrightness(BRIGHTNESS);
    }
    FastLED.show();
}

void DrawOneFrame()
{
  for (int x = 0; x < 16; x++){
    for (int y = 0; y < 16; y++){
      leds[ XY(x, y)]  = CRGB(strtol (tiplouf[x][y][0],NULL,0),strtol (tiplouf[x][y][1],NULL,0),strtol (tiplouf[x][y][2],NULL,0));
    }
  }
}


void setup() {
  FastLED.addLeds<CHIPSET, LED_PIN, COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalSMD5050);
  FastLED.setBrightness( BRIGHTNESS );
}
